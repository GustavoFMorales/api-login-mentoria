{
  "stats": {
    "suites": 22,
    "tests": 17,
    "passes": 15,
    "pending": 0,
    "failures": 2,
    "start": "2025-07-20T18:41:50.998Z",
    "end": "2025-07-20T18:41:58.699Z",
    "duration": 7701,
    "testsRegistered": 17,
    "passPercent": 88.23529411764706,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b440602b-518d-4d9f-8b3d-dcaf15aa6483",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2c36ffed-1bda-49b3-8496-5591a34fa7bb",
          "title": "Login dados corretos",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
          "file": "\\src\\tests\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "db7bb79b-947a-4670-9f77-94a3a7b7f2c1",
              "title": "POST /login",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com token quando login e senha estão corretos",
                  "fullTitle": "Login dados corretos POST /login Deve retornar 200 com token quando login e senha estão corretos",
                  "timedOut": false,
                  "duration": 24,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(SERVER_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '123456'\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.token).to.be.a('string'); // Verifica se o token é uma string",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/Users/gusta/OneDrive/%C3%81rea%20de%20Trabalho/Meus%20Projetos/mentoria-projeto-api-login/src/tests/login.test.js:30:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "984d4b41-3f3a-44c1-96a5-0eb85d447ab8",
                  "parentUUID": "db7bb79b-947a-4670-9f77-94a3a7b7f2c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "984d4b41-3f3a-44c1-96a5-0eb85d447ab8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "2b45abbc-2c06-4d76-a0aa-4a97382b1015",
              "title": "Login dados incorretos",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "190ad8bc-0613-428c-95ee-575bbe78fcbf",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando email ou senha estão incorretos",
                      "fullTitle": "Login dados corretos Login dados incorretos POST /login Deve retornar 401 quando email ou senha estão incorretos",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Senha incorreta\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {
                        "message": "AssertionError: expected 'Usuário bloqueado' to equal 'Senha incorreta'",
                        "estack": "AssertionError: expected 'Usuário bloqueado' to equal 'Senha incorreta'\n    at Context.<anonymous> (file:///C:/Users/gusta/OneDrive/%C3%81rea%20de%20Trabalho/Meus%20Projetos/mentoria-projeto-api-login/src/tests/login.test.js:47:48)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                        "diff": "- Usuário bloqueado\n+ Senha incorreta\n"
                      },
                      "uuid": "7fc362a8-cf4f-4fb6-b2ab-d1e6aa46e83e",
                      "parentUUID": "190ad8bc-0613-428c-95ee-575bbe78fcbf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "7fc362a8-cf4f-4fb6-b2ab-d1e6aa46e83e"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "5b3d50dc-f48c-46aa-a06b-8b196ec43476",
              "title": "Login dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "67a547be-0920-457c-8edc-38f632ec53ec",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando email está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando email está ausente",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': '',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "7be39794-7254-4c83-a1c6-6fbba023414f",
                      "parentUUID": "67a547be-0920-457c-8edc-38f632ec53ec",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve retornar 400 quando senha está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando senha está ausente",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': ''\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "bff33760-34be-4cfa-8c61-502a2820dcb8",
                      "parentUUID": "67a547be-0920-457c-8edc-38f632ec53ec",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7be39794-7254-4c83-a1c6-6fbba023414f",
                    "bff33760-34be-4cfa-8c61-502a2820dcb8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "abdc734e-5461-4049-b9e6-0f7ed9d35b26",
              "title": "Usuário Bloqueado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "02caefbe-201e-45b0-aa7d-788ee84268e3",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"POST /login\"",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login \"before all\" hook in \"POST /login\"",
                      "timedOut": false,
                      "duration": 12,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const loginData = {\n    email: 'joao@email.com',\n    senha: '12345678'\n};\nconst app = SERVER_URL;\nfor (let i = 0; i < 4; i++) {\n    await request(app)\n        .post('/auth/login')\n        .set('Content-Type', 'application/json')\n        .send({\n            'email': 'joao@email.com',\n            'senha': '12345678'\n        })\n}",
                      "err": {},
                      "uuid": "f9618f23-7f8a-4951-a397-98b6a1bf2a20",
                      "parentUUID": "02caefbe-201e-45b0-aa7d-788ee84268e3",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando o usuário está bloqueado",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve retornar 401 quando o usuário está bloqueado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '12345678'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Usuário bloqueado\"); // Verifica se a mensagem está correta",
                      "err": {},
                      "uuid": "b721d7fb-5ecc-43f5-8bc9-15c6f5071e45",
                      "parentUUID": "02caefbe-201e-45b0-aa7d-788ee84268e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve bloquear usuário após 3 tentativas e persistir no arquivo",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve bloquear usuário após 3 tentativas e persistir no arquivo",
                      "timedOut": false,
                      "duration": 254,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emailTeste = `teste${Date.now()}@bloqueio.com`;\nconst senhaCorreta = \"senhaCorreta123\";\nconst senhaIncorreta = \"senhaErrada\";\n\n// 1. Primeiro cadastrar um usuário de teste\nawait request(SERVER_URL)\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Bloqueio\",\n        \"email\": emailTeste,\n        \"senha\": senhaCorreta\n    });\n// 2. Fazer 3 tentativas com senha incorreta\nfor (let i = 0; i < 3; i++) {\n    await request(SERVER_URL)\n        .post('/auth/login')\n        .set('Content-Type', 'application/json')\n        .send({\n            'email': emailTeste,\n            'senha': senhaIncorreta\n        });\n}\n// 3. Verificar se o usuário foi bloqueado no arquivo\nconst usersFile = path.join(__dirname, \"../data/users.json\"); // Caminho para o arquivo users.json\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\")); // Lê os dados do arquivo\nconst usuarioBloqueado = usersData.find(user => user.email === emailTeste); // Encontra o usuário pelo email\n\nexpect(usuarioBloqueado).to.not.be.undefined;\nexpect(usuarioBloqueado.bloqueado).to.be.true;\nexpect(usuarioBloqueado.tentativasFalhas).to.equal(3);\n// 4. Tentar login com senha correta e verificar bloqueio\nconst response = await request(SERVER_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': emailTeste,\n        'senha': senhaCorreta // Mesmo com senha correta\n    });\n\nexpect(response.status).to.equal(401);\nexpect(response.body.error).to.equal(\"Usuário bloqueado\");",
                      "err": {},
                      "uuid": "a0c37779-d28f-4f4a-8dec-ce0af4d8ba8c",
                      "parentUUID": "02caefbe-201e-45b0-aa7d-788ee84268e3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b721d7fb-5ecc-43f5-8bc9-15c6f5071e45",
                    "a0c37779-d28f-4f4a-8dec-ce0af4d8ba8c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 257,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "f3fa5a1e-48a0-4f65-89d1-c97493dbc183",
          "title": "Recuperar Senha",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
          "file": "\\src\\tests\\recuperarSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "883c182c-4572-4c78-b482-9d450805c34e",
              "title": "POST /auth/recuperar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 quando o email é válido e o código de recuperação é enviado",
                  "fullTitle": "Recuperar Senha POST /auth/recuperar Deve retornar 200 quando o email é válido e o código de recuperação é enviado",
                  "timedOut": false,
                  "duration": 3713,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(SERVER_URL)\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"joao@email.com\"\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.message).to.equal(\"Código de recuperação enviado para seu e-mail.\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "e0436925-1d2c-44d4-b1b0-0e71c25c4d5f",
                  "parentUUID": "883c182c-4572-4c78-b482-9d450805c34e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0436925-1d2c-44d4-b1b0-0e71c25c4d5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3713,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "97ab300a-09f8-43fa-ae1d-280488a0f265",
              "title": "Email não encontrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1f393bdb-c077-491a-a3f4-f3b533830491",
                  "title": "POST /auth/recuperar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
                  "file": "\\src\\tests\\recuperarSenha.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 404 quando o email não está cadastrado",
                      "fullTitle": "Recuperar Senha Email não encontrado POST /auth/recuperar Deve retornar 404 quando o email não está cadastrado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"inexistente@email.com\"\n    })\nexpect(response.status).to.equal(404); // Verifica se o status é 404\nexpect(response.body.error).to.equal(\"Usuário não encontrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "1573d709-5ad1-4f30-a9a8-f0c1b7d93efe",
                      "parentUUID": "1f393bdb-c077-491a-a3f4-f3b533830491",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1573d709-5ad1-4f30-a9a8-f0c1b7d93efe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "e2c522cf-957a-4775-b24f-f6bc1d346b2f",
              "title": "E-mail ausente",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "50ccd089-0db4-4add-9d7d-cce48d784668",
                  "title": "POST /auth/recuperar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
                  "file": "\\src\\tests\\recuperarSenha.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o email está ausente",
                      "fullTitle": "Recuperar Senha E-mail ausente POST /auth/recuperar Deve retornar 400 quando o email está ausente",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({})\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email é obrigatório\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "3d38b736-a6e0-4672-a75b-f404c9c16a7e",
                      "parentUUID": "50ccd089-0db4-4add-9d7d-cce48d784668",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3d38b736-a6e0-4672-a75b-f404c9c16a7e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "155fc370-57a9-41c6-a037-1965c1b78e23",
          "title": "Redefinir Senha",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\redefinindoSenha.test.js",
          "file": "\\src\\tests\\redefinindoSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "45628cef-0fc6-4d4a-986b-0772fec33602",
              "title": "POST /auth/redefinir",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\redefinindoSenha.test.js",
              "file": "\\src\\tests\\redefinindoSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve redefinir senha com código válido do arquivo",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve redefinir senha com código válido do arquivo",
                  "timedOut": false,
                  "duration": 3458,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailTeste = \"joao@email.com\";\n\n// 1. Primeiro solicitar código de recuperação\nconst recuperarResponse = await request(SERVER_URL)\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": emailTeste\n    });\n\nexpect(recuperarResponse.status).to.equal(200);\n\n// 2. Ler o arquivo para pegar o código gerado\nconst usersFile = path.join(__dirname, \"../data/users.json\"); // Caminho para o arquivo users.json\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\")); // Lê os dados do arquivo\nconst usuario = usersData.find(user => user.email === emailTeste); // Encontra o usuário pelo email\n\nexpect(usuario).to.not.be.undefined; // Verifica se o usuário existe\nexpect(usuario.codigoRecuperacao).to.not.be.null; // Verifica se o código de recuperação não é nulo\nexpect(usuario.codigoRecuperacao).to.be.a('string'); // Verifica se o código é uma string\n\nconsole.log(`Código de recuperação encontrado: ${usuario.codigoRecuperacao}`); // Log do código para verificação\n\n// 3. Usar o código para redefinir a senha\nconst redefinirResponse = await request(SERVER_URL)\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": emailTeste,\n        \"codigo\": usuario.codigoRecuperacao, // Usando o código do arquivo\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(redefinirResponse.status).to.equal(200);\nexpect(redefinirResponse.body.message).to.equal(\"Senha redefinida com sucesso!\");\n\n// 4. Verificar se o código foi removido do arquivo\nconst usersDataAfter = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\nconst usuarioAfter = usersDataAfter.find(user => user.email === emailTeste);\nexpect(usuarioAfter.codigoRecuperacao).to.be.null;",
                  "err": {},
                  "uuid": "fcbbe291-711c-4a10-a771-a37eb71d12f8",
                  "parentUUID": "45628cef-0fc6-4d4a-986b-0772fec33602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 com código inválido",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve retornar 401 com código inválido",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(SERVER_URL)\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"joao@email.com\",\n        \"codigo\": \"999999\", // Código inválido\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(response.status).to.equal(401);\nexpect(response.body.error).to.equal(\"Código inválido.\");",
                  "err": {},
                  "uuid": "e17b0be8-6037-4ef0-8959-d39a979921d6",
                  "parentUUID": "45628cef-0fc6-4d4a-986b-0772fec33602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 404 quando usuário não existe",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve retornar 404 quando usuário não existe",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(SERVER_URL)\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"naoexiste@email.com\",\n        \"codigo\": \"123456\",\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(response.status).to.equal(404);\nexpect(response.body.error).to.equal(\"Usuário não encontrado.\");",
                  "err": {},
                  "uuid": "d53919b9-314d-42eb-b498-7d69e5601574",
                  "parentUUID": "45628cef-0fc6-4d4a-986b-0772fec33602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando dados estão ausentes",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve retornar 400 quando dados estão ausentes",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(SERVER_URL)\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"joao@email.com\",\n        // codigo ausente\n        \"novaSenha\": \"novaSenha1234\"\n    });\n\nexpect(response.status).to.equal(400);\nexpect(response.body.error).to.equal(\"Informe email, código e nova senha.\");",
                  "err": {},
                  "uuid": "6908af84-3d80-4642-964c-4c85f00e7380",
                  "parentUUID": "45628cef-0fc6-4d4a-986b-0772fec33602",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcbbe291-711c-4a10-a771-a37eb71d12f8",
                "e17b0be8-6037-4ef0-8959-d39a979921d6",
                "d53919b9-314d-42eb-b498-7d69e5601574",
                "6908af84-3d80-4642-964c-4c85f00e7380"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3468,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "d1fc9187-764b-45ab-84ef-d7f0ebcfabfc",
          "title": "Cadastro Usuario",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
          "file": "\\src\\tests\\registrar.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8680a21-26fe-4e56-bfd8-08e08cdda614",
              "title": "POST /auth/registrar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailUnico = `lucas${Date.now()}@email.com`; // Email único para evitar conflitos\n\nconst response = await request(SERVER_URL)\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": emailUnico,\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(201); // Verifica se o status é 201\nexpect(response.body.message).to.equal(\"Usuário cadastrado com sucesso\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "b44b8f8a-6b2e-428c-a1ef-b9ae0573d39f",
                  "parentUUID": "f8680a21-26fe-4e56-bfd8-08e08cdda614",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criptografar a senha corretamente",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve criptografar a senha corretamente",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailTeste = `testeCripto${Date.now()}@email.com`; // Email único\nconst senhaOriginal = \"senhaParaTeste123\";\n\n// Cadastrar o usuário\nconst response = await request(SERVER_URL)\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Criptografia\",\n        \"email\": emailTeste,\n        \"senha\": senhaOriginal\n    })\nexpect(response.status).to.equal(201);\n// Ler o arquivo users.json para verificar a senha criptografada\nconst usersFile = path.join(__dirname, \"../data/users.json\");\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\n\n// Encontrar o usuário recém-criado\nconst usuarioCriado = usersData.find(user => user.email === emailTeste);\n\nexpect(usuarioCriado).to.not.be.undefined;\n\n// Verificar se a senha foi criptografada\nexpect(usuarioCriado.senha).to.not.equal(senhaOriginal); // Senha não deve ser igual à original\nexpect(usuarioCriado.senha).to.include(\"$2b$\"); // Deve conter o prefixo do bcrypt\nexpect(usuarioCriado.senha.length).to.be.greaterThan(50); // Hash bcrypt tem mais de 50 caracteres\n\n// Verificar se a senha original bate com o hash (usando bcrypt.compare)\nconst senhaValida = await bcrypt.compare(senhaOriginal, usuarioCriado.senha);\nexpect(senhaValida).to.be.true;",
                  "err": {},
                  "uuid": "8c7695bd-48d0-4bd6-9bfd-b1bf2b835d50",
                  "parentUUID": "f8680a21-26fe-4e56-bfd8-08e08cdda614",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b44b8f8a-6b2e-428c-a1ef-b9ae0573d39f",
                "8c7695bd-48d0-4bd6-9bfd-b1bf2b835d50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 183,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "caad53fe-5a0a-40bd-a5ff-0e9bbd98523e",
              "title": "Usuario já cadastrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9658a424-d8e6-4111-8e05-6e333beb86fe",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o usuário já está cadastrado",
                      "fullTitle": "Cadastro Usuario Usuario já cadastrado POST /auth/registrar Deve retornar 400 quando o usuário já está cadastrado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"João Silva\",\n        \"email\": \"joao@email.com\",\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Usuário já cadastrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "aea1dd0e-5fd5-4a96-9e0a-d2b457a7402b",
                      "parentUUID": "9658a424-d8e6-4111-8e05-6e333beb86fe",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "aea1dd0e-5fd5-4a96-9e0a-d2b457a7402b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "54cdbb11-7a4e-49b8-8cdc-0c3121684ace",
              "title": "Dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "8b332c77-8ecf-4da7-abeb-f5403472ccdb",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando algum campo obrigatório está ausente",
                      "fullTitle": "Cadastro Usuario Dados ausentes POST /auth/registrar Deve retornar 400 quando algum campo obrigatório está ausente",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request(SERVER_URL)\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"\",\n        \"email\": \"\",\n        \"senha\": \"\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Todos os campos são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "ddd23fd9-0a07-4215-917f-8b13db300f25",
                      "parentUUID": "8b332c77-8ecf-4da7-abeb-f5403472ccdb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ddd23fd9-0a07-4215-917f-8b13db300f25"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}