{
  "stats": {
    "suites": 14,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-15T01:56:43.661Z",
    "end": "2025-07-15T01:56:44.104Z",
    "duration": 443,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d2a04295-888c-4c65-82cf-c95a22032613",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e12ff99e-b475-4b46-9e67-e633542e0368",
          "title": "Login dados corretos",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
          "file": "\\src\\tests\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7bed888c-e7cd-4d97-9b56-8861c472a29a",
              "title": "POST /login",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com token quando login e senha estão corretos",
                  "fullTitle": "Login dados corretos POST /login Deve retornar 200 com token quando login e senha estão corretos",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '123456'\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.token).to.be.a('string'); // Verifica se o token é uma string",
                  "err": {},
                  "uuid": "4826d63b-dfa7-46b2-b134-63a950909bc3",
                  "parentUUID": "7bed888c-e7cd-4d97-9b56-8861c472a29a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4826d63b-dfa7-46b2-b134-63a950909bc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6439974e-1929-498d-8696-d7796980ef5c",
              "title": "Login dados incorretos",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c51919d6-9a27-4e6d-ac62-922344438063",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando email ou senha estão incorretos",
                      "fullTitle": "Login dados corretos Login dados incorretos POST /login Deve retornar 401 quando email ou senha estão incorretos",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Senha incorreta\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "19c34ec1-8428-4e1f-87df-3c2569cab50e",
                      "parentUUID": "c51919d6-9a27-4e6d-ac62-922344438063",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "19c34ec1-8428-4e1f-87df-3c2569cab50e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 68,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82e85bcf-e526-49c2-bfcd-ba4bf4a57589",
              "title": "Login dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1b8640a0-ae9a-42df-8a79-a151345afd0a",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando email está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando email está ausente",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': '',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "16e5f1f8-8f76-499a-b3b2-9b03276e1719",
                      "parentUUID": "1b8640a0-ae9a-42df-8a79-a151345afd0a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve retornar 400 quando senha está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando senha está ausente",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': ''\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "cf6eb051-2ad7-4899-b0df-5fb11f9c7d76",
                      "parentUUID": "1b8640a0-ae9a-42df-8a79-a151345afd0a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "16e5f1f8-8f76-499a-b3b2-9b03276e1719",
                    "cf6eb051-2ad7-4899-b0df-5fb11f9c7d76"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c884b08-a39a-47db-a4dd-0037d9939021",
              "title": "Usuário Bloqueado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3f38c881-41e9-4efb-8ab5-ba1d3df62387",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando o usuário está bloqueado",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve retornar 401 quando o usuário está bloqueado",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'gustavo050899.morales@gmail.com',\n        'senha': '12345678'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Usuário bloqueado\"); // Verifica se a",
                      "err": {},
                      "uuid": "de39a252-2023-4534-b257-1e2d85fd802d",
                      "parentUUID": "3f38c881-41e9-4efb-8ab5-ba1d3df62387",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "de39a252-2023-4534-b257-1e2d85fd802d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b5b7347a-b763-4fc4-8453-0d469bff8351",
          "title": "Cadastro Usuario",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
          "file": "\\src\\tests\\registrar.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d50eaca-c900-41d7-bc0a-6f8dba0ca55f",
              "title": "POST /auth/registrar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailUnico = `lucas${Date.now()}@email.com`; // Email único para evitar conflitos\n\nconst response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": emailUnico,\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(201); // Verifica se o status é 201\nexpect(response.body.message).to.equal(\"Usuário cadastrado com sucesso\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "28dea8a8-ddc9-4dd4-b829-82a3d8c0026a",
                  "parentUUID": "1d50eaca-c900-41d7-bc0a-6f8dba0ca55f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criptografar a senha corretamente",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve criptografar a senha corretamente",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailTeste = `testeCripto${Date.now()}@email.com`; // Email único\nconst senhaOriginal = \"senhaParaTeste123\";\n\n// Cadastrar o usuário\nconst response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Criptografia\",\n        \"email\": emailTeste,\n        \"senha\": senhaOriginal\n    })\nexpect(response.status).to.equal(201);\n// Ler o arquivo users.json para verificar a senha criptografada\nconst usersFile = path.join(__dirname, \"../data/users.json\");\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\n\n// Encontrar o usuário recém-criado\nconst usuarioCriado = usersData.find(user => user.email === emailTeste);\n\nexpect(usuarioCriado).to.not.be.undefined;\n\n// Verificar se a senha foi criptografada\nexpect(usuarioCriado.senha).to.not.equal(senhaOriginal); // Senha não deve ser igual à original\nexpect(usuarioCriado.senha).to.include(\"$2b$\"); // Deve conter o prefixo do bcrypt\nexpect(usuarioCriado.senha.length).to.be.greaterThan(50); // Hash bcrypt tem mais de 50 caracteres\n\n// Verificar se a senha original bate com o hash (usando bcrypt.compare)\nconst senhaValida = await bcrypt.compare(senhaOriginal, usuarioCriado.senha);\nexpect(senhaValida).to.be.true;",
                  "err": {},
                  "uuid": "2accd3ca-394c-4c0b-88ea-d2358858a8bd",
                  "parentUUID": "1d50eaca-c900-41d7-bc0a-6f8dba0ca55f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28dea8a8-ddc9-4dd4-b829-82a3d8c0026a",
                "2accd3ca-394c-4c0b-88ea-d2358858a8bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 209,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6902ddc-8ea6-450e-92fa-28f310a1cfe3",
              "title": "Usuario já cadastrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "79d2385a-5ce7-4d28-8505-b820f7515693",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o usuário já está cadastrado",
                      "fullTitle": "Cadastro Usuario Usuario já cadastrado POST /auth/registrar Deve retornar 400 quando o usuário já está cadastrado",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": \"lucasSilva@email.com\",\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Usuário já cadastrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "231b3610-1a21-4691-aa77-9269e5f325a1",
                      "parentUUID": "79d2385a-5ce7-4d28-8505-b820f7515693",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "231b3610-1a21-4691-aa77-9269e5f325a1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ef09f72-c733-473e-9dd7-ebf50ed9a444",
              "title": "Dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7439d1a0-1de5-4267-a497-e5a0c64fe0ed",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando algum campo obrigatório está ausente",
                      "fullTitle": "Cadastro Usuario Dados ausentes POST /auth/registrar Deve retornar 400 quando algum campo obrigatório está ausente",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"\",\n        \"email\": \"\",\n        \"senha\": \"\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Todos os campos são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "d242ad12-757a-432c-926e-59932de07c10",
                      "parentUUID": "7439d1a0-1de5-4267-a497-e5a0c64fe0ed",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d242ad12-757a-432c-926e-59932de07c10"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}