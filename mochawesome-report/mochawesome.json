{
  "stats": {
    "suites": 20,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-19T13:16:56.821Z",
    "end": "2025-07-19T13:17:00.856Z",
    "duration": 4035,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a4afc06a-dce4-47f9-bdbc-4cbc38ce7b51",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f882af64-a5e0-49ac-bd23-14670e1243a3",
          "title": "Login dados corretos",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
          "file": "\\src\\tests\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "439b19aa-8aa7-4b3b-80ae-8462dfe64185",
              "title": "POST /login",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com token quando login e senha estão corretos",
                  "fullTitle": "Login dados corretos POST /login Deve retornar 200 com token quando login e senha estão corretos",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '123456'\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.token).to.be.a('string'); // Verifica se o token é uma string",
                  "err": {},
                  "uuid": "172f5d75-49fa-409f-8bbe-cd7f89bc1baa",
                  "parentUUID": "439b19aa-8aa7-4b3b-80ae-8462dfe64185",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "172f5d75-49fa-409f-8bbe-cd7f89bc1baa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "6bd2fb34-337d-4b79-b27f-edd0cc8c610e",
              "title": "Login dados incorretos",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "84ddf9ff-61aa-47c9-8b38-dc797567063c",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando email ou senha estão incorretos",
                      "fullTitle": "Login dados corretos Login dados incorretos POST /login Deve retornar 401 quando email ou senha estão incorretos",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Senha incorreta\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "f2948b77-4acf-43ee-802f-e3bcc40a91d0",
                      "parentUUID": "84ddf9ff-61aa-47c9-8b38-dc797567063c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f2948b77-4acf-43ee-802f-e3bcc40a91d0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 62,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "cf933c8c-2523-48cf-a2e5-f8e939576347",
              "title": "Login dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "65d0b0d5-3c40-48ec-8eec-baaca35d931b",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando email está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando email está ausente",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': '',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "c99775b0-f2a5-419a-8337-cdcdc8b00548",
                      "parentUUID": "65d0b0d5-3c40-48ec-8eec-baaca35d931b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve retornar 400 quando senha está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando senha está ausente",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': ''\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "91514fe8-e395-4054-b66d-fbdd55caff8a",
                      "parentUUID": "65d0b0d5-3c40-48ec-8eec-baaca35d931b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c99775b0-f2a5-419a-8337-cdcdc8b00548",
                    "91514fe8-e395-4054-b66d-fbdd55caff8a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "ed63a252-7a90-4e88-83c7-803e0887baff",
              "title": "Usuário Bloqueado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "83653319-ff1c-4710-896e-d4b61a4e7144",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"POST /login\"",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login \"before all\" hook in \"POST /login\"",
                      "timedOut": false,
                      "duration": 12,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const loginData = {\n    email: 'gustavo050899.morales@gmail.com',\n    senha: '12345678'\n};\nconst app = 'http://localhost:3000';\nfor (let i = 0; i < 4; i++) {\n    await request(app)\n        .post('/auth/login')\n        .set('Content-Type', 'application/json')\n        .send({\n            'email': 'gustavo050899.morales@gmail.com',\n            'senha': '12345678'\n        })\n}",
                      "err": {},
                      "uuid": "01c8d228-77de-4c8f-a0a6-df15d96421d9",
                      "parentUUID": "83653319-ff1c-4710-896e-d4b61a4e7144",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando o usuário está bloqueado",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve retornar 401 quando o usuário está bloqueado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'gustavo050899.morales@gmail.com',\n        'senha': '12345678'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Usuário bloqueado\"); // Verifica se a mensagem está correta",
                      "err": {},
                      "uuid": "323391dc-74b9-4235-8d50-0d58f42892d8",
                      "parentUUID": "83653319-ff1c-4710-896e-d4b61a4e7144",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve bloquear usuário após 3 tentativas e persistir no arquivo",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve bloquear usuário após 3 tentativas e persistir no arquivo",
                      "timedOut": false,
                      "duration": 252,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emailTeste = `teste${Date.now()}@bloqueio.com`;\nconst senhaCorreta = \"senhaCorreta123\";\nconst senhaIncorreta = \"senhaErrada\";\n\n// 1. Primeiro cadastrar um usuário de teste\nawait request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Bloqueio\",\n        \"email\": emailTeste,\n        \"senha\": senhaCorreta\n    });\n// 2. Fazer 3 tentativas com senha incorreta\nfor (let i = 0; i < 3; i++) {\n    await request('http://localhost:3000')\n        .post('/auth/login')\n        .set('Content-Type', 'application/json')\n        .send({\n            'email': emailTeste,\n            'senha': senhaIncorreta\n        });\n}\n// 3. Verificar se o usuário foi bloqueado no arquivo\nconst usersFile = path.join(__dirname, \"../data/users.json\");\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\nconst usuarioBloqueado = usersData.find(user => user.email === emailTeste);\n\nexpect(usuarioBloqueado).to.not.be.undefined;\nexpect(usuarioBloqueado.bloqueado).to.be.true;\nexpect(usuarioBloqueado.tentativasFalhas).to.equal(3);\n// 4. Tentar login com senha correta e verificar bloqueio\nconst response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': emailTeste,\n        'senha': senhaCorreta // Mesmo com senha correta\n    });\n\nexpect(response.status).to.equal(401);\nexpect(response.body.error).to.equal(\"Usuário bloqueado\");",
                      "err": {},
                      "uuid": "e54969b9-9eab-415a-8788-c45e4610f7d4",
                      "parentUUID": "83653319-ff1c-4710-896e-d4b61a4e7144",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "323391dc-74b9-4235-8d50-0d58f42892d8",
                    "e54969b9-9eab-415a-8788-c45e4610f7d4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 255,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "94860362-28ad-45ee-b64b-67bba4aa3053",
          "title": "Recuperar Senha",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
          "file": "\\src\\tests\\recuperarSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3bd655ad-528e-471c-a640-ff69ed81a804",
              "title": "POST /auth/recuperar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 quando o email é válido e o código de recuperação é enviado",
                  "fullTitle": "Recuperar Senha POST /auth/recuperar Deve retornar 200 quando o email é válido e o código de recuperação é enviado",
                  "timedOut": false,
                  "duration": 3402,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"gustavo050899.morales@gmail.com\"\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.message).to.equal(\"Código de recuperação enviado para seu e-mail.\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "a9992f65-efa0-465c-a931-9ddd09dab0c7",
                  "parentUUID": "3bd655ad-528e-471c-a640-ff69ed81a804",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9992f65-efa0-465c-a931-9ddd09dab0c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3402,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "1c3af4ce-029e-4a12-a866-b82f5f4d9d53",
              "title": "Email não encontrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4d2060d6-3fa3-40a8-a83c-cf025b4ee0e6",
                  "title": "POST /auth/recuperar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
                  "file": "\\src\\tests\\recuperarSenha.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 404 quando o email não está cadastrado",
                      "fullTitle": "Recuperar Senha Email não encontrado POST /auth/recuperar Deve retornar 404 quando o email não está cadastrado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"inexistente@email.com\"\n    })\nexpect(response.status).to.equal(404); // Verifica se o status é 404\nexpect(response.body.error).to.equal(\"Usuário não encontrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "d1161c6e-ef02-4c08-bfd9-dd3841448737",
                      "parentUUID": "4d2060d6-3fa3-40a8-a83c-cf025b4ee0e6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d1161c6e-ef02-4c08-bfd9-dd3841448737"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "c033b389-6caa-4a25-9b65-4bccde084076",
              "title": "E-mail ausente",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "72ec6674-f95b-4a14-81c7-8059411efeaf",
                  "title": "POST /auth/recuperar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
                  "file": "\\src\\tests\\recuperarSenha.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o e-mail não é fornecido",
                      "fullTitle": "Recuperar Senha E-mail ausente POST /auth/recuperar Deve retornar 400 quando o e-mail não é fornecido",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({})\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email é obrigatório\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "c3c11717-8592-4595-8174-a4eb82fe4d36",
                      "parentUUID": "72ec6674-f95b-4a14-81c7-8059411efeaf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c3c11717-8592-4595-8174-a4eb82fe4d36"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "f3acf92b-edd8-464f-842b-ab6ea7435040",
          "title": "Cadastro Usuario",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
          "file": "\\src\\tests\\registrar.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "06751ce4-8c95-4f97-844c-5f26870cd816",
              "title": "POST /auth/registrar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailUnico = `lucas${Date.now()}@email.com`; // Email único para evitar conflitos\n\nconst response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": emailUnico,\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(201); // Verifica se o status é 201\nexpect(response.body.message).to.equal(\"Usuário cadastrado com sucesso\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "46546eea-aa3b-4f18-970c-6a80381dc30e",
                  "parentUUID": "06751ce4-8c95-4f97-844c-5f26870cd816",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criptografar a senha corretamente",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve criptografar a senha corretamente",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailTeste = `testeCripto${Date.now()}@email.com`; // Email único\nconst senhaOriginal = \"senhaParaTeste123\";\n\n// Cadastrar o usuário\nconst response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Criptografia\",\n        \"email\": emailTeste,\n        \"senha\": senhaOriginal\n    })\nexpect(response.status).to.equal(201);\n// Ler o arquivo users.json para verificar a senha criptografada\nconst usersFile = path.join(__dirname, \"../data/users.json\");\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\n\n// Encontrar o usuário recém-criado\nconst usuarioCriado = usersData.find(user => user.email === emailTeste);\n\nexpect(usuarioCriado).to.not.be.undefined;\n\n// Verificar se a senha foi criptografada\nexpect(usuarioCriado.senha).to.not.equal(senhaOriginal); // Senha não deve ser igual à original\nexpect(usuarioCriado.senha).to.include(\"$2b$\"); // Deve conter o prefixo do bcrypt\nexpect(usuarioCriado.senha.length).to.be.greaterThan(50); // Hash bcrypt tem mais de 50 caracteres\n\n// Verificar se a senha original bate com o hash (usando bcrypt.compare)\nconst senhaValida = await bcrypt.compare(senhaOriginal, usuarioCriado.senha);\nexpect(senhaValida).to.be.true;",
                  "err": {},
                  "uuid": "6fc324d6-bbaa-416a-b6d1-57d1826e8a18",
                  "parentUUID": "06751ce4-8c95-4f97-844c-5f26870cd816",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46546eea-aa3b-4f18-970c-6a80381dc30e",
                "6fc324d6-bbaa-416a-b6d1-57d1826e8a18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 185,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "09e16140-3066-46e2-8993-6c398e281632",
              "title": "Usuario já cadastrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4dc4c30d-6800-4736-93cf-8ba05e166f8c",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o usuário já está cadastrado",
                      "fullTitle": "Cadastro Usuario Usuario já cadastrado POST /auth/registrar Deve retornar 400 quando o usuário já está cadastrado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": \"lucasSilva@email.com\",\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Usuário já cadastrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "99a3d887-9bb2-497b-bfd5-23c75ab26b38",
                      "parentUUID": "4dc4c30d-6800-4736-93cf-8ba05e166f8c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "99a3d887-9bb2-497b-bfd5-23c75ab26b38"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8b644ab7-abf8-416e-a868-9ce826ea9db6",
              "title": "Dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "26664185-1d61-44ab-8a6d-103ae998d83d",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando algum campo obrigatório está ausente",
                      "fullTitle": "Cadastro Usuario Dados ausentes POST /auth/registrar Deve retornar 400 quando algum campo obrigatório está ausente",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"\",\n        \"email\": \"\",\n        \"senha\": \"\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Todos os campos são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "c64d6669-c2e3-4daf-99e6-dd0fca3820ac",
                      "parentUUID": "26664185-1d61-44ab-8a6d-103ae998d83d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c64d6669-c2e3-4daf-99e6-dd0fca3820ac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}