{
  "stats": {
    "suites": 22,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-19T15:04:42.449Z",
    "end": "2025-07-19T15:04:50.993Z",
    "duration": 8544,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2449b473-5697-46b3-9d02-490c41899862",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fdbdaf82-3ab7-4d76-b2d2-5f43b368823e",
          "title": "Login dados corretos",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
          "file": "\\src\\tests\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b0adb611-aaf9-474c-b9c4-f3568de5ad5e",
              "title": "POST /login",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com token quando login e senha estão corretos",
                  "fullTitle": "Login dados corretos POST /login Deve retornar 200 com token quando login e senha estão corretos",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '123456'\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.token).to.be.a('string'); // Verifica se o token é uma string",
                  "err": {},
                  "uuid": "7d59b8fd-2d94-490d-9706-70e53b14e658",
                  "parentUUID": "b0adb611-aaf9-474c-b9c4-f3568de5ad5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d59b8fd-2d94-490d-9706-70e53b14e658"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "94bf6520-84bd-4179-ab20-64911048efbc",
              "title": "Login dados incorretos",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "31adbed0-d599-4d93-980a-669c6a30376d",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando email ou senha estão incorretos",
                      "fullTitle": "Login dados corretos Login dados incorretos POST /login Deve retornar 401 quando email ou senha estão incorretos",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Senha incorreta\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "87210fca-4417-4ea2-808e-0124149678d6",
                      "parentUUID": "31adbed0-d599-4d93-980a-669c6a30376d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "87210fca-4417-4ea2-808e-0124149678d6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 63,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "ea066236-5c4b-4625-8858-37968776671e",
              "title": "Login dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "8abac2d7-240a-4551-b3da-2f0a436b8406",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando email está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando email está ausente",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': '',\n        'senha': '12345'\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "b5014e5c-0dbd-4d59-ab36-24da18c2e0c3",
                      "parentUUID": "8abac2d7-240a-4551-b3da-2f0a436b8406",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve retornar 400 quando senha está ausente",
                      "fullTitle": "Login dados corretos Login dados ausentes POST /login Deve retornar 400 quando senha está ausente",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'joao@email.com',\n        'senha': ''\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email e senha são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "e30c638b-7166-4287-8d0c-180ba785e63b",
                      "parentUUID": "8abac2d7-240a-4551-b3da-2f0a436b8406",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b5014e5c-0dbd-4d59-ab36-24da18c2e0c3",
                    "e30c638b-7166-4287-8d0c-180ba785e63b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8cf31676-469b-4d80-98cf-03fe1f989dc6",
              "title": "Usuário Bloqueado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
              "file": "\\src\\tests\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3c798d0a-2772-44b5-bc67-3b126033d70f",
                  "title": "POST /login",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\login.test.js",
                  "file": "\\src\\tests\\login.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"POST /login\"",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login \"before all\" hook in \"POST /login\"",
                      "timedOut": false,
                      "duration": 11,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const loginData = {\n    email: 'gustavo050899.morales@gmail.com',\n    senha: '12345678'\n};\nconst app = 'http://localhost:3000';\nfor (let i = 0; i < 4; i++) {\n    await request(app)\n        .post('/auth/login')\n        .set('Content-Type', 'application/json')\n        .send({\n            'email': 'gustavo050899.morales@gmail.com',\n            'senha': '12345678'\n        })\n}",
                      "err": {},
                      "uuid": "98b11946-9702-4301-aaeb-51982f5aeb3f",
                      "parentUUID": "3c798d0a-2772-44b5-bc67-3b126033d70f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 401 quando o usuário está bloqueado",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve retornar 401 quando o usuário está bloqueado",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': 'gustavo050899.morales@gmail.com',\n        'senha': '12345678'\n    })\nexpect(response.status).to.equal(401); // Verifica se o status é 401\nexpect(response.body.error).to.equal(\"Usuário bloqueado\"); // Verifica se a mensagem está correta",
                      "err": {},
                      "uuid": "862676e7-a739-4bdc-bb0a-cd3b92618e2a",
                      "parentUUID": "3c798d0a-2772-44b5-bc67-3b126033d70f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve bloquear usuário após 3 tentativas e persistir no arquivo",
                      "fullTitle": "Login dados corretos Usuário Bloqueado POST /login Deve bloquear usuário após 3 tentativas e persistir no arquivo",
                      "timedOut": false,
                      "duration": 255,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emailTeste = `teste${Date.now()}@bloqueio.com`;\nconst senhaCorreta = \"senhaCorreta123\";\nconst senhaIncorreta = \"senhaErrada\";\n\n// 1. Primeiro cadastrar um usuário de teste\nawait request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Bloqueio\",\n        \"email\": emailTeste,\n        \"senha\": senhaCorreta\n    });\n// 2. Fazer 3 tentativas com senha incorreta\nfor (let i = 0; i < 3; i++) {\n    await request('http://localhost:3000')\n        .post('/auth/login')\n        .set('Content-Type', 'application/json')\n        .send({\n            'email': emailTeste,\n            'senha': senhaIncorreta\n        });\n}\n// 3. Verificar se o usuário foi bloqueado no arquivo\nconst usersFile = path.join(__dirname, \"../data/users.json\"); // Caminho para o arquivo users.json\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\")); // Lê os dados do arquivo\nconst usuarioBloqueado = usersData.find(user => user.email === emailTeste); // Encontra o usuário pelo email\n\nexpect(usuarioBloqueado).to.not.be.undefined;\nexpect(usuarioBloqueado.bloqueado).to.be.true;\nexpect(usuarioBloqueado.tentativasFalhas).to.equal(3);\n// 4. Tentar login com senha correta e verificar bloqueio\nconst response = await request('http://localhost:3000')\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'email': emailTeste,\n        'senha': senhaCorreta // Mesmo com senha correta\n    });\n\nexpect(response.status).to.equal(401);\nexpect(response.body.error).to.equal(\"Usuário bloqueado\");",
                      "err": {},
                      "uuid": "2a4899b8-a126-437e-aee0-e9ee7469138b",
                      "parentUUID": "3c798d0a-2772-44b5-bc67-3b126033d70f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "862676e7-a739-4bdc-bb0a-cd3b92618e2a",
                    "2a4899b8-a126-437e-aee0-e9ee7469138b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 259,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "43c310f2-7051-4875-8d9d-c4b8ed25e41c",
          "title": "Recuperar Senha",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
          "file": "\\src\\tests\\recuperarSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f00d35d7-26c2-4b32-a5e7-65ccfbb32c08",
              "title": "POST /auth/recuperar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 quando o email é válido e o código de recuperação é enviado",
                  "fullTitle": "Recuperar Senha POST /auth/recuperar Deve retornar 200 quando o email é válido e o código de recuperação é enviado",
                  "timedOut": false,
                  "duration": 4352,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"gustavo050899.morales@gmail.com\"\n    })\nexpect(response.status).to.equal(200); // Verifica se o status é 200\nexpect(response.body.message).to.equal(\"Código de recuperação enviado para seu e-mail.\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "33ea1df1-1fdc-4782-9d9d-a20bfb275588",
                  "parentUUID": "f00d35d7-26c2-4b32-a5e7-65ccfbb32c08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33ea1df1-1fdc-4782-9d9d-a20bfb275588"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4352,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "07313192-1ffe-4e19-bba1-cdd7a1dccd72",
              "title": "Email não encontrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9860ba91-e684-4374-86d2-eeeabfc72228",
                  "title": "POST /auth/recuperar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
                  "file": "\\src\\tests\\recuperarSenha.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 404 quando o email não está cadastrado",
                      "fullTitle": "Recuperar Senha Email não encontrado POST /auth/recuperar Deve retornar 404 quando o email não está cadastrado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"inexistente@email.com\"\n    })\nexpect(response.status).to.equal(404); // Verifica se o status é 404\nexpect(response.body.error).to.equal(\"Usuário não encontrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "8af9ca97-eebc-4fca-bd5d-ac693c580c02",
                      "parentUUID": "9860ba91-e684-4374-86d2-eeeabfc72228",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8af9ca97-eebc-4fca-bd5d-ac693c580c02"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "7daf7df5-6c85-4cf3-90cd-b601c76e8485",
              "title": "E-mail ausente",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
              "file": "\\src\\tests\\recuperarSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "aa085274-7f20-4824-acf3-08c364e22116",
                  "title": "POST /auth/recuperar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\recuperarSenha.test.js",
                  "file": "\\src\\tests\\recuperarSenha.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o e-mail não é fornecido",
                      "fullTitle": "Recuperar Senha E-mail ausente POST /auth/recuperar Deve retornar 400 quando o e-mail não é fornecido",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({})\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Email é obrigatório\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "d6d0f9c9-329f-4e21-9940-500512fc8782",
                      "parentUUID": "aa085274-7f20-4824-acf3-08c364e22116",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d6d0f9c9-329f-4e21-9940-500512fc8782"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "c3bb6527-ac3f-4983-a665-a721284d9c6a",
          "title": "Redefinir Senha",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\redefinindoSenha.test.js",
          "file": "\\src\\tests\\redefinindoSenha.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c01cf719-f72b-4cf6-83b6-5c33c274e8a4",
              "title": "POST /auth/redefinir",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\redefinindoSenha.test.js",
              "file": "\\src\\tests\\redefinindoSenha.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve redefinir senha com código válido do arquivo",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve redefinir senha com código válido do arquivo",
                  "timedOut": false,
                  "duration": 3526,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailTeste = \"gustavo050899.morales@gmail.com\";\n\n// 1. Primeiro solicitar código de recuperação\nconst recuperarResponse = await request('http://localhost:3000')\n    .post('/auth/recuperar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": emailTeste\n    });\n\nexpect(recuperarResponse.status).to.equal(200);\n\n// 2. Ler o arquivo para pegar o código gerado\nconst usersFile = path.join(__dirname, \"../data/users.json\");\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\nconst usuario = usersData.find(user => user.email === emailTeste);\n\nexpect(usuario).to.not.be.undefined;\nexpect(usuario.codigoRecuperacao).to.not.be.null;\nexpect(usuario.codigoRecuperacao).to.be.a('string');\n\nconsole.log(`Código de recuperação encontrado: ${usuario.codigoRecuperacao}`);\n\n// 3. Usar o código para redefinir a senha\nconst redefinirResponse = await request('http://localhost:3000')\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": emailTeste,\n        \"codigo\": usuario.codigoRecuperacao, // Usando o código do arquivo\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(redefinirResponse.status).to.equal(200);\nexpect(redefinirResponse.body.message).to.equal(\"Senha redefinida com sucesso!\");\n\n// 4. Verificar se o código foi removido do arquivo\nconst usersDataAfter = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\nconst usuarioAfter = usersDataAfter.find(user => user.email === emailTeste);\nexpect(usuarioAfter.codigoRecuperacao).to.be.null;",
                  "err": {},
                  "uuid": "25422902-7fde-4ed8-ac4d-a448ec24c41b",
                  "parentUUID": "c01cf719-f72b-4cf6-83b6-5c33c274e8a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 com código inválido",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve retornar 401 com código inválido",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"gustavo050899.morales@gmail.com\",\n        \"codigo\": \"999999\", // Código inválido\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(response.status).to.equal(401);\nexpect(response.body.error).to.equal(\"Código inválido.\");",
                  "err": {},
                  "uuid": "8cd99711-4903-4d29-8284-44e09b9e264f",
                  "parentUUID": "c01cf719-f72b-4cf6-83b6-5c33c274e8a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 404 quando usuário não existe",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve retornar 404 quando usuário não existe",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"naoexiste@email.com\",\n        \"codigo\": \"123456\",\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(response.status).to.equal(404);\nexpect(response.body.error).to.equal(\"Usuário não encontrado.\");",
                  "err": {},
                  "uuid": "becbf194-1263-4237-8850-876da2fb8acc",
                  "parentUUID": "c01cf719-f72b-4cf6-83b6-5c33c274e8a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando dados estão ausentes",
                  "fullTitle": "Redefinir Senha POST /auth/redefinir Deve retornar 400 quando dados estão ausentes",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request('http://localhost:3000')\n    .post('/auth/redefinir')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"email\": \"gustavo050899.morales@gmail.com\",\n        // codigo ausente\n        \"novaSenha\": \"novaSenha123\"\n    });\n\nexpect(response.status).to.equal(400);\nexpect(response.body.error).to.equal(\"Informe email, código e nova senha.\");",
                  "err": {},
                  "uuid": "f34e3093-2bc2-4b2e-ac28-98c8ba315b83",
                  "parentUUID": "c01cf719-f72b-4cf6-83b6-5c33c274e8a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25422902-7fde-4ed8-ac4d-a448ec24c41b",
                "8cd99711-4903-4d29-8284-44e09b9e264f",
                "becbf194-1263-4237-8850-876da2fb8acc",
                "f34e3093-2bc2-4b2e-ac28-98c8ba315b83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3539,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "1d5a59b3-2fe8-44fd-8f59-0676977efc79",
          "title": "Cadastro Usuario",
          "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
          "file": "\\src\\tests\\registrar.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "926fedd1-a140-4727-b19a-5ff5fb435eb9",
              "title": "POST /auth/registrar",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve retornar 201 quando o usuário é cadastrado com sucesso",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailUnico = `lucas${Date.now()}@email.com`; // Email único para evitar conflitos\n\nconst response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": emailUnico,\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(201); // Verifica se o status é 201\nexpect(response.body.message).to.equal(\"Usuário cadastrado com sucesso\"); // Verifica se a mensagem de sucesso é a esperada",
                  "err": {},
                  "uuid": "512dd5e5-1562-4ed5-b8db-0825b3d901d1",
                  "parentUUID": "926fedd1-a140-4727-b19a-5ff5fb435eb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criptografar a senha corretamente",
                  "fullTitle": "Cadastro Usuario POST /auth/registrar Deve criptografar a senha corretamente",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emailTeste = `testeCripto${Date.now()}@email.com`; // Email único\nconst senhaOriginal = \"senhaParaTeste123\";\n\n// Cadastrar o usuário\nconst response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Teste Criptografia\",\n        \"email\": emailTeste,\n        \"senha\": senhaOriginal\n    })\nexpect(response.status).to.equal(201);\n// Ler o arquivo users.json para verificar a senha criptografada\nconst usersFile = path.join(__dirname, \"../data/users.json\");\nconst usersData = JSON.parse(fs.readFileSync(usersFile, \"utf8\"));\n\n// Encontrar o usuário recém-criado\nconst usuarioCriado = usersData.find(user => user.email === emailTeste);\n\nexpect(usuarioCriado).to.not.be.undefined;\n\n// Verificar se a senha foi criptografada\nexpect(usuarioCriado.senha).to.not.equal(senhaOriginal); // Senha não deve ser igual à original\nexpect(usuarioCriado.senha).to.include(\"$2b$\"); // Deve conter o prefixo do bcrypt\nexpect(usuarioCriado.senha.length).to.be.greaterThan(50); // Hash bcrypt tem mais de 50 caracteres\n\n// Verificar se a senha original bate com o hash (usando bcrypt.compare)\nconst senhaValida = await bcrypt.compare(senhaOriginal, usuarioCriado.senha);\nexpect(senhaValida).to.be.true;",
                  "err": {},
                  "uuid": "f8edc6d0-a382-4c74-95a0-0326892a8150",
                  "parentUUID": "926fedd1-a140-4727-b19a-5ff5fb435eb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "512dd5e5-1562-4ed5-b8db-0825b3d901d1",
                "f8edc6d0-a382-4c74-95a0-0326892a8150"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 194,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "9b41be20-83a5-43f0-9679-e8ffd2bc5d19",
              "title": "Usuario já cadastrado",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2a2569ec-cd81-45ea-a238-baf5881af6ef",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando o usuário já está cadastrado",
                      "fullTitle": "Cadastro Usuario Usuario já cadastrado POST /auth/registrar Deve retornar 400 quando o usuário já está cadastrado",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"Lucas Silva\",\n        \"email\": \"lucasSilva@email.com\",\n        \"senha\": \"123456\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Usuário já cadastrado\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "f5b3cf63-99ed-4b42-b94c-28227d2aafb5",
                      "parentUUID": "2a2569ec-cd81-45ea-a238-baf5881af6ef",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f5b3cf63-99ed-4b42-b94c-28227d2aafb5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "38a6ffe5-0fbc-4da7-aab8-1b2ceedd54d3",
              "title": "Dados ausentes",
              "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
              "file": "\\src\\tests\\registrar.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c8b55521-8c91-427f-8047-70dc72c7792f",
                  "title": "POST /auth/registrar",
                  "fullFile": "C:\\Users\\gusta\\OneDrive\\Área de Trabalho\\Meus Projetos\\mentoria-projeto-api-login\\src\\tests\\registrar.test.js",
                  "file": "\\src\\tests\\registrar.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve retornar 400 quando algum campo obrigatório está ausente",
                      "fullTitle": "Cadastro Usuario Dados ausentes POST /auth/registrar Deve retornar 400 quando algum campo obrigatório está ausente",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const response = await request('http://localhost:3000')\n    .post('/auth/cadastrar')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"nome\": \"\",\n        \"email\": \"\",\n        \"senha\": \"\"\n    })\nexpect(response.status).to.equal(400); // Verifica se o status é 400\nexpect(response.body.error).to.equal(\"Todos os campos são obrigatórios\"); // Verifica se a mensagem de erro é a esperada",
                      "err": {},
                      "uuid": "0fb7a4ac-fa7c-4ff7-bf7c-b39c9751e1dd",
                      "parentUUID": "c8b55521-8c91-427f-8047-70dc72c7792f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0fb7a4ac-fa7c-4ff7-bf7c-b39c9751e1dd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}